#!/bin/bash

usage() {
    if [ "$*" ]; then
        echo "$*"
        echo
    fi
    echo "Usage: $NAME [--uid UID] [--user USER] [--password PASS] [--skip FLG]"
    echo
    echo "Configure new user as a first-time action."    
    echo
    echo "    --uid UID              Old user ID, usually 1000"
    echo "    --user USER            New user name to be set"
    echo "    --password PASS        New password to be set"
    echo "    --skip FLG             Use value 1 to skip this"
    echo "                                    "
    exit 2
}


die() {
    echo
    echo "$*"
    echo
    exit 1
}


skip() {
    echo
    echo "User setup skipped!"
    echo
    exit 0
}


# Default Arguments Values
SKIP_ARG=""
UID_ARG=""
USER_ARG=""
PASS_ARG=""


# Parse Arguments
while [ "$*" ]; do
    param=$1; shift; OPTARG=$1
    case $param in
    --uid )           UID_ARG="$OPTARG"; shift        ;;
    --user )          USER_ARG="$OPTARG"; shift       ;;
    --password )      PASS_ARG="$OPTARG"; shift       ;;
    --skip )          SKIP_ARG="$OPTARG"; shift       ;;
    -h|--help) usage                                  ;;
    -*) usage "Unknown option: $param"                ;;
    *) break                                          ;;
    esac
done


# Print Title
echo
echo "Configuring new user name and password as a first-time action"
echo "(recommended for security)"
echo


# Get Skip Flag
if [ -z "$SKIP_ARG" ]; then
    read -p "To skip this setup type [Y or y]: " SKIP_ARG
    echo
fi


# Skip process if user really wants
if [[ "$SKIP_ARG" =~ ^[yY]$ ]]; then skip; fi


# Get User ID
if [ -z "$UID_ARG" ]; then
    read -p "Enter UID: " UID_ARG
    while ! [[ "$UID_ARG" =~ ^[0-9]{4}$ ]] ; do
        echo "Wrong UID, should be in format NNNN"
        read -p "Enter UID: " UID_ARG
    done
fi


# Get User Name
if [ -z "$USER_ARG" ]; then
    read -p "User Name: " USER_ARG
    while ! [[ "$USER_ARG" =~ ^[a-z_]([a-z0-9_-]{0,31}|[a-z0-9_-]{0,30}\$)$ ]] ; do
        echo "Invalid User Name string, should not contain special chars and has max 31 chars"
        read -p "User Name: " USER_ARG
    done
fi


# Get Password
if [ -z "$PASS_ARG" ]; then
    read -s -p "Password: " PASS_ARG
    echo
    while [[ ${#PASS_ARG} -gt 128 ]] ; do
        echo "Wrong Password, should not be larger than 128 chars"
        read -s -p "Password: " PASS_ARG
        echo
    done

    # Confirm Password
    read -s -p "Password Confirm: " PASS_CONFIRM
    echo
    while [[ $PASS_ARG != $PASS_CONFIRM ]] ; do
        echo "Wrong Password Confirm, both values must be same"
        read -s -p "Password Confirm: " PASS_CONFIRM
        echo
    done
fi


# Find Original User Name
USEROLD=$(id -nu $UID_ARG)


# Rename User
usermod -l $USER_ARG $USEROLD
STATUS=$?; if [ $STATUS -ne 0 ]; then die "Cannot rename user from default user (usermod failed)"; fi


# Rename User Group
groupmod -n $USER_ARG $USEROLD
STATUS=$?; if [ $STATUS -ne 0 ]; then die "Cannot rename user group from default user group (groupmod failed)"; fi


# Change Password
echo "$USER_ARG:$PASS_ARG" | chpasswd
STATUS=$?; if [ $STATUS -ne 0 ]; then die "Cannot change user password (chpasswd failed)"; fi


# Success
echo
echo "User successfully configured."
echo
